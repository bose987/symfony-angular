<?php
namespace Bundles\OrderBundle\Entity\Repository;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * OrdersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class OrdersRepository extends EntityRepository
{

	public function getOrders($limit = null)
	{
		$qb = $this->createQueryBuilder('b')
		->select('b');

		if (false === is_null($limit))
			$qb->setMaxResults($limit);

			return $qb->getQuery()->getResult();
	}
	
	public function fetchById( $id ) {
		
	}
	
	public function fetchDetailsByIdByCustomerId( $intId, $intCustomerId ) {
	
		$qb = $this->createQueryBuilder('o')
		->select('o, oi')
		->join( 'o.customer', 'c' )
		->join( 'o.order_items', 'oi' )
		->where( 
				'o.id = :id
				AND c.id = :customer_id' )
		->setParameters(
			array(
				'id' => $intId,
				'customer_id' => $intCustomerId
			)
		);
		return $qb->getQuery()->getOneOrNullResult( Query::HYDRATE_ARRAY );
	}

	public function fetchDetailsByCustomerId( $intCustomerId ) {
	
		$qb = $this->createQueryBuilder('o')
		->select('o, oi, p')
		->join( 'o.customer', 'c' )
		->join( 'o.order_items', 'oi' )
		->join( 'oi.product', 'p' )
		->where( 'c.id = :customer_id' )
		->setParameters(
			array(
				'customer_id' => $intCustomerId
			)
		);
		return $qb->getQuery()->getResult( Query::HYDRATE_ARRAY );
	}
	
	
}